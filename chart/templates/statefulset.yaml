---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: webapp
    app.kubernetes.io/instance: fortify
    app.kubernetes.io/managed-by: flux
    app.kubernetes.io/name: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Values.image.tag | quote }}
  name: fortify-fortify-ssc-webapp
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/component: webapp
      app.kubernetes.io/instance: fortify
      app.kubernetes.io/name: {{ .Release.Name | quote }}
  serviceName: webapp
  template:
    metadata:
      labels:
        app.kubernetes.io/component: webapp
        app.kubernetes.io/instance: fortify
        app.kubernetes.io/name: {{ .Release.Name | quote }}
    spec:
      {{- if .Values.runAsRootGroup }}
      securityContext:
        fsGroup: 0
      {{- end }}
      containers:
      - env:
        - name: CATALINA_OPTS
          value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=86.0 -Dcom.redhat.fips=false"
        - name: JDBC_DRIVER_URI
          value: {{ .Values.jdbc_driver }}
        - name: HTTP_SERVER_CERTIFICATE_VERIFICATION
          value: none
        - name: COM_FORTIFY_SSC_ENFORCESECURETRANSPORT
          value: {{ .Values.enforce_secure_transport | quote }}
        - name: SSC_AUTOCONFIG_HOST_URL
          value: "https://{{ .Values.hostname }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: IfNotPresent
        name: webapp
        ports:
        - containerPort: {{ .Values.port.http | default 8080 }}
          name: http-web
          protocol: TCP
        - containerPort:  {{ .Values.port.https | default 8443 }}
          name: https-web
          protocol: TCP
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: Host
              value: fortify-service
            path: /images/favicon.ico
            port: http-web
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
        resources:
            {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        - mountPath: /fortify/secrets
          name: shared
          readOnly: true
        - mountPath: /fortify
          name: persistent-volume
        - mountPath: /app/tomcat/conf/server-tpl.xml
          subPath: server-tpl.xml
          name: tomcat-template
      imagePullSecrets:
      - name: {{ .Values.image.imagePullSecrets }}
      initContainers:
      - command:
        - /bin/bash
        - -ecv
        - |
          while ! mysqladmin ping -h $DBHOST --silent; do
            sleep 10
          done
          {{- if .Values.databaseSecret.useRoot }}
          mysql -h $DBHOST -u $DBROOTUSER -p$DBROOTPASSWORD -e "CREATE DATABASE IF NOT EXISTS fortify CHARACTER SET utf8 COLLATE utf8_bin"
          {{- else }}
          mysql -h $DBHOST -u $DBUSER -p$DBPASSWORD -e "CREATE DATABASE IF NOT EXISTS fortify CHARACTER SET utf8 COLLATE utf8_bin"
          {{- end }}
        envFrom:
        - secretRef:
            {{- if not .Values.databaseSecret.use_secret }}
            name: db-credentials-mysql
            {{- else }}
            name: {{ .Values.databaseSecret.name | quote }}
            {{- end }}
        image: "{{ .Values.initContainer.image }}:{{ .Values.initContainer.tag }}"
        name: seed-data-loader
        resources:
          {{- toYaml .Values.initContainer.resources | nindent 10 }}
      - name: keystore-gen
        image: "{{ .Values.initContainer.keystoreImage }}:{{ .Values.initContainer.keystoreTag }}"
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        args:
        - /script/gen.sh
        volumeMounts:
        - name: keystore-script
          mountPath: /script
        - name: shared
          mountPath: /shared
        - name: secrets-volume
          mountPath: /secrets
        resources:
          {{- toYaml .Values.initContainer.resources | nindent 10 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: secrets-volume
        secret:
          {{- if not .Values.fortifySecret.use_secret }}
          secretName: {{ .Chart.Name }}-secret
          {{- else }}
          secretName: {{ .Values.fortifySecret.name | quote }}
          {{- end }}
      - name: persistent-volume
        persistentVolumeClaim:
          claimName: {{ .Chart.Name }}-pvc
      - configMap:
          name: tomcat-config
        name: tomcat-config
      - name: shared
        emptyDir: {}
      - name: keystore-script
        configMap:
          name: {{ .Chart.Name }}-keystore-script
      - name: tomcat-template
        configMap:
          name: {{ .Chart.Name }}-tomcat-template
