{{- $context := merge (dict "component" "webapp") . -}}
{{- $urlPort := required "The service.httpsPort config value is required!" .Values.service.httpsPort | int -}}
{{- if gt (.Values.urlPort | int) 0 -}}
{{-   $urlPort = .Values.urlPort | int -}}
{{- end -}}
{{- $urlAuthority := printf "%s:%d" (required "The urlHost config value is required! " .Values.urlHost | toString | trim) $urlPort -}}
{{- $urlPathPrefix := printf "/%s" (trimAll "/" .Values.sscPathPrefix) | trimSuffix "/" -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ssc.fullcomponentname" $context }}
  labels:
    {{- include "ssc.labels" $context | nindent 4 }}
spec:
  serviceName: "webapp"
  replicas: 1
  selector:
    matchLabels:
      {{- include "ssc.selector" $context | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ssc.selector" $context | nindent 8 }}
    spec:
      containers:
        - name: webapp
          ports:
            - name: http-web
              containerPort: 8080
              protocol: TCP
            - name: https-web
              containerPort: 8443
              protocol: TCP
          readinessProbe:
            initialDelaySeconds: 120
            periodSeconds: 30
            httpGet:
              path: /images/favicon.ico
              port: http-web
              scheme: HTTP
              httpHeaders:
                - name: Host
                  value: {{ include "ssc.fullcomponentname" (merge (dict "component" "service") . ) }}
          env:
            - name: SSC_AUTOCONFIG_HOST_URL
              value: "{{ printf "https://%s%s" $urlAuthority $urlPathPrefix }}"
            - name: HTTP_SERVER_SSC_PATH_PREFIX
              value: "{{ $urlPathPrefix }}"
            - name: COM_FORTIFY_SSC_ENFORCESECURETRANSPORT
              value: "false"
            - name: CATALINA_OPTS
              value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage={{ required "The jvmMaxRAMPercentage config value is required!" .Values.jvmMaxRAMPercentage | int }}.0 {{ .Values.jvmExtraOptions }}"
            - name: HTTP_SERVER_CERTIFICATE_VERIFICATION
              value: "{{ required "The httpClientCertificateVerification config value is required!" .Values.httpClientCertificateVerification | toString | trim }}"
          {{- with .Values.secretRef }}
            {{- if .keys.sscAutoconfigEntry }}
            - name: COM_FORTIFY_SSC_LICENSEPATH
              value: "/app/secrets/{{ required "The secretRef.keys.sscLicenseEntry config value is required!" .keys.sscLicenseEntry | toString | trim }}"
            - name: COM_FORTIFY_SSC_AUTOCONFIGPATH
              value: "/app/secrets/{{ required "The secretRef.keys.sscAutoconfigEntry config value is required!" .keys.sscAutoconfigEntry | toString | trim }}"
            {{- end }}
            {{- with .keys.sscSecretKeyEntry }}
            - name: COM_FORTIFY_SSC_SECRETKEY
              value: "/app/secrets/{{ required "The secretRef.keys.sscSecretKeyEntry config value is required!" . | toString | trim }}"
            {{- end }}
            - name: HTTP_SERVER_CERTIFICATE_KEYSTORE_FILE
              value: "/app/secrets/{{ required "The secretRef.keys.httpCertificateKeystoreFileEntry config value is required!" .keys.httpCertificateKeystoreFileEntry | toString | trim }}"
            - name: HTTP_SERVER_CERTIFICATE_KEYSTORE_PASSWORD_FILE
              value: "/app/secrets/{{ required "The secretRef.keys.httpCertificateKeystorePasswordEntry config value is required!" .keys.httpCertificateKeystorePasswordEntry | toString | trim }}"
            - name: HTTP_SERVER_CERTIFICATE_KEY_PASSWORD_FILE
              value: "/app/secrets/{{ required "The secretRef.keys.httpCertificateKeyPasswordEntry config value is required!" .keys.httpCertificateKeyPasswordEntry | toString | trim }}"
            {{- if .keys.httpTruststoreFileEntry }}
            - name: HTTP_SERVER_TRUSTSTORE_FILE
              value: "/app/secrets/{{ required "The secretRef.keys.httpTruststoreFileEntry config value is required!" .keys.httpTruststoreFileEntry | toString | trim }}"
            - name: HTTP_SERVER_TRUSTSTORE_PASSWORD_FILE
              value: "/app/secrets/{{ required "The secretRef.keys.httpTruststorePasswordEntry config value is required!" .keys.httpTruststorePasswordEntry | toString | trim }}"
            {{- end }}
            {{- if .keys.jvmTruststoreFileEntry }}
            - name: JVM_TRUSTSTORE_FILE
              value: "/app/secrets/{{ required "The secretRef.keys.jvmTruststoreFileEntry config value is required!" .keys.jvmTruststoreFileEntry | toString | trim }}"
            - name: JVM_TRUSTSTORE_PASSWORD_FILE
              {{- $jvmTruststorePasswordEntry := .keys.jvmTruststorePasswordEntry | default .keys.jmvTruststorePasswordEntry }}{{/* provide backward compatibility */}}
              value: "/app/secrets/{{ required "The secretRef.keys.jvmTruststorePasswordEntry config value is required!" $jvmTruststorePasswordEntry | toString | trim }}"
            {{- end }}
          {{- end }}
          {{- with .Values.environment }}
            {{- toYaml . | nindent 12 -}}
          {{- end }}
          image: "{{ .Values.image.repositoryPrefix }}{{ .Values.image.webapp }}:{{ include "ssc.image.tag" $context }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: shared
              readOnly: true
              mountPath: "/app/secrets"
            - name: persistent-volume
              mountPath: "/fortify"
            - mountPath: /app/tomcat/conf/server-tpl.xml
              subPath: server-tpl.xml
              name: tomcat-template
            - name: etc-volume
              mountPath: "/app/etc"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            {{- toYaml .Values.securityContext | nindent 12 }}
            readOnlyRootFilesystem: true
      initContainers:
        - name: keystore-gen
          image: "{{ .Values.initContainer.keystoreImage }}:{{ .Values.initContainer.keystoreTag }}"
          imagePullPolicy: IfNotPresent
          securityContext:
            {{- toYaml .Values.initContainer.securityContext | nindent 12 }}
          command:
          - /bin/sh
          args:
          - /script/gen.sh
          volumeMounts:
          - name: keystore-script
            mountPath: /script
          - name: shared
            mountPath: /shared
          - name: secrets-volume
            mountPath: /secrets
          resources:
            {{- toYaml .Values.initContainer.resources | nindent 12 }}
      volumes:
        - name: secrets-volume
          secret:
            {{- if not .Values.databaseSecret.use_secret }}
            secretName: {{ include "ssc.fullcomponentname" (merge (dict "component" "secret") . ) }}
            {{- else }}
            secretName: {{ required "The secretRef.name config value is required!" .Values.secretRef.name }}
            {{- end }}
        - name: persistent-volume
          persistentVolumeClaim:
            claimName: {{ include "ssc.fullcomponentname" (merge (dict "component" "pvc") . ) }}
        - name: shared
          emptyDir: {}
        - name: keystore-script
          configMap:
            name: {{ include "ssc.fullcomponentname" (merge (dict "component" "keystore-script") . ) }}
        - name: tomcat-template
          configMap:
            name: {{ include "ssc.fullcomponentname" (merge (dict "component" "tomcat-template") . ) }}
        - name: etc-volume
          emptyDir:
            sizeLimit: 1Mi
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 -}}
    {{- end }}
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        # should be kept in sync with image metadata
        runAsUser: {{ .Values.user.uid }}
        runAsGroup: {{ .Values.user.gid }}
        fsGroup: {{ .Values.user.gid }}
        fsGroupChangePolicy: OnRootMismatch
